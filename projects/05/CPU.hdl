// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //decode instruction ixxaccccccdddjjj from index 15 to 0
    //i=0 for a, i=1 for c (i is opcode)
    //in a, load whole instruction
    //in c, a and c are comp, d is dest, j is jump

    //handle type a instructions
    Not(in=instruction[15], out=aInst); //if instruction[15]==0, a instruction
    Mux16(a=aluOut, b=instruction, sel=aInst, out=Inst); //a instruction takes entire "instruction"

    Or(a=aInst, b=instruction[5], out=inA); //handles dest
    ARegister(in=Inst, load=inA, out=A, out[0..14]=addressM); //loads a instruction for execution, A instruction is ind 0-14

    //handle type c instructions
    //A or M
    And(a=instruction[15], b=instruction[12], out=ALUamsel); //i value 1 for c; if a bit is 1, then A register, if 0, then M input
    Mux16(a=A, b=inM, sel=ALUamsel, out=ALUam); //a bit determines if ALU operates A register input or M input

    And(a=instruction[15], b=instruction[4], out=inD); //4-9 is ALU control bit
    DRegister(in=aluOut, load=inD, out=D);

    ALU(x=D, y=ALUam, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out=outM, zr=zrOut, ng=ngOut); //handles c bits (comp)

    //writeM
    And(a=instruction[15], b=instruction[3], out=writeM); //third d bit

    //fetch next instruction
    //use pc, pc=0 is reset, A output feeds into pc; if jump PC=A, else PC++
    Not(in=zrOut, out=notzr);
    Not(in=ngOut, out=loc);

    //jgt
    And(a=instruction[15], b=instruction[0], out=jgt);
    And(a=notzr, b=loc, out=locnotzr);
    And(a=jgt, b=locnotzr, out=load1);

    //jeq
    And(a=instruction[15], b=instruction[1], out=jeq);
    And(a=jeq, b=zrOut, out=load2);

    //jlt
    And(a=instruction[15], b=instruction[2], out=jlt);
    And(a=jlt, b=ngOut, out=load3);

    Or(a=load1, b=load2, out=load12);
    Or(a=load12, b=load3, out=load);

    PC(in=A, load=load, inc=true, reset=reset, out[0..14]=pc);
}